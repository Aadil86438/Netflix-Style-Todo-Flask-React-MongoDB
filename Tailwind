import axios from "axios";

const BaseApi = axios.create({
  baseURL: "http://localhost:8080",
  headers: { "Content-Type": "application/json" },
  withCredentials: true
});

export default {
  Login(name, mobileno, email) {
    let Hdrs = { name: name, mobileno: mobileno, email: email };
    return BaseApi.post("/login", Hdrs);
  },
  SavePersonal(data) {
    return BaseApi.post("/personal", data);
  },
  AddFund(id, type, amount) {
    let Hdrs = { id: id, type: type, amount: amount };
    return BaseApi.post("/addfund", Hdrs);
  },
  Withdraw(id, amount) {
    let Hdrs = { id: id, amount: amount };
    return BaseApi.post("/withdraw", Hdrs);
  },
  Dashboard(user_id) {
    return BaseApi.post("/dashboard", { user_id: user_id });
  },
  DownloadBilling() {
    return BaseApi.get("/billing", { responseType: "blob" });
  },
  GetShares() {
    return BaseApi.get("/shares");
  },
  BuyShare(user_id, share_id, qty) {
    let Hdrs = { user_id: user_id, share_id: share_id, qty: qty, type: "BUY" };
    return BaseApi.post("/buy", Hdrs);
  },
  SellShare(user_id, share_id, qty) {
    let Hdrs = { user_id: user_id, share_id: share_id, qty: qty, type: "SELL" };
    return BaseApi.post("/sell", Hdrs);
  },
  AdminDashboard() {
    return BaseApi.get("/admin/dashboard");
  },
  ApproveUser(id) {
    return BaseApi.post("/admin/approve", { id: id });
  },
  RejectUser(id) {
    return BaseApi.post("/admin/reject", { id: id });
  }
};


---

ðŸ“‚ src/components/LoginForm.vue

<template>
  <v-container>
    <h2>User Login</h2>
    <v-form ref="form" v-model="valid">
      <v-text-field
        v-model="name"
        label="Name"
        :rules="[v => !!v || 'Name is required']"
        required
      ></v-text-field>

      <v-text-field
        v-model="mobileno"
        label="Mobile Number"
        :rules="[
          v => !!v || 'Mobile number is required',
          v => (v && v.length === 10) || 'Must be 10 digits'
        ]"
        required
      ></v-text-field>

      <v-text-field
        v-model="email"
        label="Email"
        :rules="[
          v => !!v || 'Email is required',
          v => /.+@.+\..+/.test(v) || 'Invalid email'
        ]"
        required
      ></v-text-field>

      <v-btn color="primary" @click="doLogin">Login</v-btn>
    </v-form>

    <v-alert v-if="errorMsg" type="error" dense>{{ errorMsg }}</v-alert>
    <v-alert v-if="successMsg" type="success" dense>{{ successMsg }}</v-alert>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return {
      name: "",
      mobileno: "",
      email: "",
      errorMsg: "",
      successMsg: "",
      valid: false
    };
  },
  methods: {
    doLogin() {
      if (!this.$refs.form.validate()) {
        this.errorMsg = "Please fix validation errors";
        this.successMsg = "";
        return;
      }
      EventService.Login(this.name, this.mobileno, this.email)
        .then(res => {
          if (res.data.status === "SUCCESS") {
            this.successMsg = res.data.msg;
            this.errorMsg = "";
            this.$router.push("/dashboard");
          } else {
            this.errorMsg = res.data.errmsg || "Login failed";
            this.successMsg = "";
          }
        })
        .catch(() => {
          this.errorMsg = "Server error. Try again.";
          this.successMsg = "";
        });
    }
  }
};
</script>


---

ðŸ“‚ src/components/Dashboard.vue

<template>
  <v-container>
    <h2>User Dashboard</h2>
    <v-btn color="primary" @click="loadData">Load My Data</v-btn>

    <v-card v-if="dashboard" class="mt-4" outlined>
      <v-card-text>
        <p><b>Balance:</b> {{ dashboard.balance }}</p>
        <p><b>Total Invested:</b> {{ dashboard.total_invested }}</p>
        <p><b>Total Withdrawn:</b> {{ dashboard.total_withdrawn }}</p>
      </v-card-text>
    </v-card>

    <v-btn color="secondary" class="mt-3" @click="downloadBilling">Download Billing CSV</v-btn>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return { dashboard: null };
  },
  methods: {
    loadData() {
      EventService.Dashboard(1)
        .then(res => {
          this.dashboard = res.data;
        })
        .catch(() => {
          alert("Error fetching dashboard");
        });
    },
    downloadBilling() {
      EventService.DownloadBilling()
        .then(res => {
          const url = window.URL.createObjectURL(new Blob([res.data]));
          const link = document.createElement("a");
          link.href = url;
          link.setAttribute("download", "billing.csv");
          document.body.appendChild(link);
          link.click();
        })
        .catch(() => {
          alert("Error downloading billing");
        });
    }
  }
};
</script>


---

ðŸ“‚ src/components/Bank.vue

<template>
  <v-container>
    <h2>Bank Operations</h2>
    <v-form ref="form" v-model="valid">
      <v-text-field
        v-model="amount"
        label="Amount"
        :rules="[
          v => !!v || 'Amount required',
          v => (!isNaN(v) && v > 0) || 'Enter valid number'
        ]"
        required
      ></v-text-field>

      <v-btn color="green" @click="addFund">Add Fund</v-btn>
      <v-btn color="red" class="ml-2" @click="withdraw">Withdraw</v-btn>
    </v-form>

    <v-alert v-if="msg" type="info" dense class="mt-3">{{ msg }}</v-alert>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return { amount: "", msg: "", valid: false };
  },
  methods: {
    addFund() {
      if (!this.$refs.form.validate()) {
        this.msg = "Invalid amount";
        return;
      }
      EventService.AddFund(1, "CASH", this.amount)
        .then(res => { this.msg = res.data.msg || res.data.errmsg; })
        .catch(() => { this.msg = "Error adding fund"; });
    },
    withdraw() {
      if (!this.$refs.form.validate()) {
        this.msg = "Invalid amount";
        return;
      }
      EventService.Withdraw(1, this.amount)
        .then(res => { this.msg = res.data.msg || res.data.errmsg; })
        .catch(() => { this.msg = "Error withdrawing"; });
    }
  }
};
</script>


---

ðŸ“‚ src/components/Trading.vue

<template>
  <v-container>
    <h2>Trading</h2>
    <v-btn color="primary" @click="loadShares">Load Shares</v-btn>

    <v-data-table :headers="headers" :items="shares" class="mt-3">
      <template v-slot:item.actions="{ item }">
        <v-btn small color="green" @click="buy(item.id)">Buy</v-btn>
        <v-btn small color="red" @click="sell(item.id)">Sell</v-btn>
      </template>
    </v-data-table>

    <v-alert v-if="msg" type="info" dense class="mt-2">{{ msg }}</v-alert>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data: () => ({
    shares: [],
    msg: "",
    headers: [
      { text: "ID", value: "id" },
      { text: "Name", value: "name" },
      { text: "Price", value: "price" },
      { text: "Actions", value: "actions", sortable: false }
    ]
  }),
  methods: {
    loadShares() {
      EventService.GetShares()
        .then(res => { this.shares = res.data; })
        .catch(() => { this.msg = "Error loading shares"; });
    },
    buy(id) {
      EventService.BuyShare(1, id, 1)
        .then(res => { this.msg = res.data.msg || res.data.errmsg; })
        .catch(() => { this.msg = "Error buying share"; });
    },
    sell(id) {
      EventService.SellShare(1, id, 1)
        .then(res => { this.msg = res.data.msg || res.data.errmsg; })
        .catch(() => { this.msg = "Error selling share"; });
    }
  }
};
</script>


---

ðŸ“‚ src/components/AdminDashboard.vue

<template>
  <v-container>
    <h2>Admin Dashboard</h2>
    <v-btn color="primary" @click="loadData">Load Stats</v-btn>

    <v-card v-if="stats" class="mt-3" outlined>
      <v-card-text>
        <p><b>Total Users:</b> {{ stats.total_users }}</p>
        <p><b>Active Users:</b> {{ stats.active_users }}</p>
        <p><b>Total Balance:</b> {{ stats.total_balance }}</p>
      </v-card-text>
    </v-card>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";
export default {
  data: () => ({ stats: null }),
  methods: {
    loadData() {
      EventService.AdminDashboard()
        .then(res => { this.stats = res.data; })
        .catch(() => alert("Error loading admin data"));
    }
  }
};
</script>


---

ðŸ“‚ src/components/UserManagement.vue

<template>
  <v-container>
    <h2>User Management</h2>
    <v-form ref="form">
      <v-text-field v-model="userId" label="User ID"></v-text-field>
      <v-btn color="green" @click="approveUser">Approve</v-btn>
      <v-btn color="red" @click="rejectUser">Reject</v-btn>
    </v-form>
    <v-alert v-if="msg" type="info" dense>{{ msg }}</v-alert>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data: () => ({ userId: "", msg: "" }),
  methods: {
    approveUser() {
      EventService.ApproveUser(this.userId)
        .then(res => { this.msg = res.data.msg || res.data.errmsg; })
        .catch(() => { this.msg = "Error approving"; });
    },
    rejectUser() {
      EventService.RejectUser(this.userId)
        .then(res => { this.msg = res.data.msg || res.data.errmsg; })
        .catch(() => { this.msg = "Error rejecting"; });
    }
  }
};
</script>
